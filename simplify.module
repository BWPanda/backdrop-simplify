<?php
/**
 * @file
 * Simplifies the user interface by hiding particular fields.
 */

/**
 * Implements hook_permission().
 */
function simplify_permission() {
  return array(
    'administer simplify' => array(
      'title' => t('Administer simplify'),
    ),
    'view hidden fields' => array(
      'title' => t('View hidden fields'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function simplify_config_info() {
  $prefixes['simplify.global'] = array(
    'label' => t('Global fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.nodes'] = array(
    'label' => t('Node fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.comments'] = array(
    'label' => t('Comment fields'),
    'group' => t('Simplify'),
  );
  $prefixes['simplify.taxonomy'] = array(
    'label' => t('Taxonomy fields'),
    'group' => t('Simplify'),
  );

  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function simplify_menu() {
  $items = array();

  // Add global configuration form
  $items['admin/config/user-interface/simplify'] = array(
    'title' => 'Simplify',
    'description' => 'Configure hidden fields globally.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('simplify_global_configuration_form'),
    'access arguments' => array('administer simplify'),
  );

  return $items;
}

/**
 * Simplify global configuration form.
 */
function simplify_global_configuration_form($form, &$form_state) {
  $config = config('simplify.global');

  // Nodes
  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Nodes'),
    '#description' => t("These fields will be hidden from <em>all</em> node forms. Alternatively, to hide fields from node forms of a particular content type, edit the content type and configure the hidden fields there."),
  );
  $form['nodes']['simplify_nodes_global'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide'),
    '#options' => simplify_get_fields('nodes'),
    '#default_value' => $config->get('nodes'),
  );

  // Users
  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('Users'),
    '#description' => t("These fields will be hidden from all user account forms."),
  );
  $form['users']['simplify_users_global'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide'),
    '#options' => simplify_get_fields('users'),
    '#default_value' => $config->get('users'),
  );

  // Comments
  if (module_exists('comment')) {
    $form['comments'] = array(
      '#type' => 'fieldset',
      '#title' => t('Comments'),
      '#description' => t("These fields will be hidden from <em>all</em> comment forms. Alternatively, to hide fields from comment forms for nodes of a particular content type, edit the content type and configure the hidden fields there."),
    );
    $form['comments']['simplify_comments_global'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide'),
      '#options' => simplify_get_fields('comments'),
      '#default_value' => $config->get('comments'),
    );
  }

  // Taxonomy
  if (module_exists('taxonomy')) {
    $form['taxonomy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taxonomy'),
      '#description' => t("These fields will be hidden from <em>all</em> taxonomy term forms. Alternatively, to hide fields from taxonomy term forms for a particular vocabulary, edit the vocabulary and configure the hidden fields there."),
    );
    $form['taxonomy']['simplify_taxonomy_global'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide'),
      '#options' => simplify_get_fields('taxonomy'),
      '#default_value' => $config->get('taxonomy'),
    );
  }

  // Blocks
  if (module_exists('block')) {
    $form['blocks'] = array(
      '#type' => 'fieldset',
      '#title' => t('Blocks'),
      '#description' => t("These fields will be hidden from all block forms."),
    );
    $form['blocks']['simplify_blocks_global'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide'),
      '#options' => simplify_get_fields('blocks'),
      '#default_value' => $config->get('blocks'),
    );
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    ),
  );
  return $form;
}

/**
 * Submit function for simplify_global_configuration_form().
 */
function simplify_global_configuration_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $config = config('simplify.global');
  $config->set('nodes', array_values(array_filter($values['simplify_nodes_global'])));
  $config->set('users', array_values(array_filter($values['simplify_users_global'])));
  if (isset($values['simplify_comments_global'])) {
    $config->set('comments', array_values(array_filter($values['simplify_comments_global'])));
  }
  if (isset($values['simplify_taxonomy_global'])) {
    $config->set('taxonomy', array_values(array_filter($values['simplify_taxonomy_global'])));
  }
  if (isset($values['simplify_blocks_global'])) {
    $config->set('blocks', array_values(array_filter($values['simplify_blocks_global'])));
  }
  $config->save();

  backdrop_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function simplify_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type'];

  // Nodes
  $form['simplify'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simplify'),
    '#description' => t("These fields will be hidden from <em>@type</em> node forms. Disabled checkboxes indicate fields that have been hidden globally on the <a href=\"@global\">Simplify administration page</a>.", array('@type' => $type->name, '@global' => url('admin/config/user-interface/simplify'))),
    '#access' => user_access('administer simplify'),
    '#group' => 'additional_settings',
  );
  $form['simplify']['simplify_nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide'),
    '#options' => simplify_get_fields('nodes'),
    '#default_value' => config_get('simplify.nodes', $type->type),
    '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
  );

  // Comments
  if (!empty($form['comment'])) {
    $form['comment']['simplify'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simplify'),
      '#description' => t("These fields will be hidden from <em>@type</em> comment forms. Disabled checkboxes indicate fields that have been hidden globally on the <a href=\"@global\">Simplify administration page</a>.", array('@type' => $type->name, '@global' => url('admin/config/user-interface/simplify'))),
      '#access' => user_access('administer simplify'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['comment']['simplify']['simplify_comments'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide'),
      '#options' => simplify_get_fields('comments'),
      '#default_value' => config_get('simplify.comments', $type->type),
      '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
    );
  }

  // Custom submit function
  $form['#submit'][] = 'simplify_form_node_type_form_alter_submit';
}

/**
 * Submit function for simplify_form_node_type_form_alter().
 */
function simplify_form_node_type_form_alter_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Nodes
  config_set('simplify.nodes', $values['type'], array_values(array_filter($values['simplify_nodes'])));

  // Comments
  if (isset($values['simplify_comments'])) {
    config_set('simplify.comments', $values['type'], array_values(array_filter($values['simplify_comments'])));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary.
 */
function simplify_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  $vocabulary = $form['#vocabulary'];

  // Taxonomy
  $form['simplify'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simplify'),
    '#description' => t("These fields will be hidden from <em>@vocabulary</em> taxonomy term forms. Disabled checkboxes indicate fields that have been hidden globally on the <a href=\"@global\">Simplify administration page</a>.", array('@vocabulary' => $vocabulary->name, '@global' => url('admin/config/user-interface/simplify'))),
    '#access' => user_access('administer simplify'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['simplify']['simplify_taxonomy'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide'),
    '#options' => simplify_get_fields('taxonomy'),
    '#default_value' => config_get('simplify.taxonomy', $vocabulary->machine_name),
    '#after_build' => array('simplify_disable_globally_hidden_checkboxes'),
  );

  // Custom submit function
  $form['#submit'][] = 'simplify_form_taxonomy_form_vocabulary_alter_submit';
}

/**
 * Submit function for simplify_form_taxonomy_form_vocabulary_alter().
 */
function simplify_form_taxonomy_form_vocabulary_alter_submit($form, &$form_state) {
  $values = $form_state['values'];

  config_set('simplify.taxonomy', $values['machine_name'], array_values(array_filter($values['simplify_taxonomy'])));
}

/**
 * Disable checkboxes to indicate fields have been hidden globally.
 */
function simplify_disable_globally_hidden_checkboxes($element, &$form_state) {
  // Get globally hidden fields
  $name_parts = array_reverse(explode('_', $element['#name']));
  $global_fields = config_get('simplify.global', $name_parts[0]);

  // Disable any globally hidden fields
  foreach (element_children($element) as $field) {
    if (in_array($field, $global_fields)) {
      $element[$field]['#checked'] = TRUE;
      $element[$field]['#attributes']['disabled'] = 'disabled';
    }
  }

  return $element;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function simplify_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // Get array of fields to hide
  $global_fields = config_get('simplify.global', 'nodes');
  $type_fields = config_get('simplify.nodes', $node->type);
  $fields = array_merge($global_fields, $type_fields);

  // Hide fields
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function simplify_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Get array of fields to hide
  $fields = config_get('simplify.global', 'users');

  // Hide fields
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function simplify_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Same as simplify_form_user_profile_form_alter()
  simplify_form_user_profile_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for comment_form.
 */
function simplify_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // Get array of fields to hide
  $global_fields = config_get('simplify.global', 'comments');
  $type_fields = config_get('simplify.comments', $node->type);
  $fields = array_merge($global_fields, $type_fields);

  // Hide fields
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term.
 */
function simplify_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $vocabulary = $form['#vocabulary'];

  // Get array of fields to hide
  $global_fields = config_get('simplify.global', 'taxonomy');
  $vocabulary_fields = config_get('simplify.taxonomy', $vocabulary->machine_name);
  $fields = array_merge($global_fields, $vocabulary_fields);

  // Hide fields
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for block_add_block_form.
 */
function simplify_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
  // Get array of fields to hide
  $fields = config_get('simplify.global', 'blocks');

  // Hide fields
  simplify_hide_fields($fields, $form);
}

/**
 * Implements hook_form_FORM_ID_alter() for block_admin_configure.
 */
function simplify_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  // Same as simplify_form_block_add_block_form_alter()
  simplify_form_block_add_block_form_alter($form, $form_state, $form_id);
}

/**
 * Hide fields from all users without the 'View hidden fields' permission.
 */
function simplify_hide_fields($fields, &$form) {
  if (!empty($fields) && !user_access('view hidden fields')) {
    foreach ($fields as $field) {
      simplify_hide_field($field, $form);
    }
  }
}

/**
 * Get an array of fields (by type) that can be hidden.
 */
function simplify_get_fields($type) {
  $fields = array();

  switch ($type) {
    // Nodes
    case 'nodes':
      // Backdrop core
      $fields['author'] = t('Authoring information');
      $fields['format'] = t('Text format selection');
      $fields['options'] = t('Publishing options');
      $fields['revision'] = t('Revision information');
      if (module_exists('book')) {
        $fields['book'] = t('Book outline');
      }
      if (module_exists('comment')) {
        $fields['comment'] = t('Comment settings');
      }
      if (module_exists('menu')) {
        $fields['menu'] = t('Menu settings');
      }
      if (module_exists('path')) {
        $fields['path'] = t('URL path settings');
      }
      // Third-party modules
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
      if (module_exists('xmlsitemap_node')) {
        $fields['xmlsitemap'] = t('XML sitemap');
      }
    break;

    // Users
    case 'users':
      // Backdrop core
      $fields['format'] = t('Text format selection');
      if (module_exists('contact')) {
        $fields['contact'] = t('Contact settings');
      }
      // Third-party modules
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
    break;

    // Comments
    case 'comments':
      // Backdrop core
      $fields['format'] = t('Text format selection');
    break;

    // Taxonomy
    case 'taxonomy':
      // Backdrop core
      $fields['format'] = t('Text format selection');
      $fields['relations'] = t('Relations');
      if (module_exists('path')) {
        $fields['path'] = t('URL alias');
      }
      // Third-party modules
      if (module_exists('metatag')) {
        $fields['metatag'] = t('Meta tags');
      }
      if (module_exists('redirect')) {
        $fields['redirect'] = t('URL redirects');
      }
      if (module_exists('xmlsitemap_taxonomy')) {
        $fields['xmlsitemap'] = t('XML sitemap');
      }
    break;

    // Blocks
    case 'blocks':
      // Backdrop core
      $fields['format'] = t('Text format selection');
    break;
  }

  // Allow other modules to alter the array of fields that can be hidden
  backdrop_alter('simplify_get_fields', $fields, $type);

  return $fields;
}

/**
 * Hide a given field.
 */
function simplify_hide_field($field, &$form) {
  switch ($field) {

    // Authoring information
    case 'author':
      $form['author']['#access'] = FALSE;
    break;

    // Book outline
    case 'book':
      $form['book']['#access'] = FALSE;
    break;

    // Comment settings
    case 'comment':
      $form['comment_settings']['#access'] = FALSE;
    break;

    // Contact settings
    case 'contact':
      $form['contact']['#access'] = FALSE;
    break;

    // Text format selection
    case 'format':
      $js = 'jQuery(document).ready(function($) {
        $("#' . $form['#id'] . ' fieldset.filter-wrapper").hide();
      });';
      backdrop_add_js($js, 'inline');
    break;

    // Menu settings
    case 'menu':
      $form['menu']['#access'] = FALSE;
    break;

    // Meta tags
    case 'metatag':
      $form['metatags']['#access'] = FALSE;
    break;

    // Publishing options
    case 'options':
      $form['options']['#access'] = FALSE;
    break;

    // URL path settings
    case 'path':
      $form['path']['#access'] = FALSE;
    break;

    // URL redirects
    case 'redirect':
      $form['redirect']['#access'] = FALSE;
    break;

    // Relations
    case 'relations':
      $form['relations']['#access'] = FALSE;
    break;

    // Revision information
    case 'revision':
      $form['revision_information']['#access'] = FALSE;
    break;

    // XML sitemap
    case 'xmlsitemap':
      $form['xmlsitemap']['#access'] = FALSE;
    break;

  }

  // Allow other modules to alter the way fields are hidden
  backdrop_alter('simplify_hide_field', $form, $field);
}

